from decimal import Decimal
from typing import List, Optional, Dict
from sqlalchemy.orm import Session
from .models import BaseEvent, Account
from .billing import BillingContext
from .logic import make_rules
from .processor import load_metadata
from loguru import logger

class RuleEngine:
    """Main rule engine that applies all registered rules"""
    
    def __init__(self):
        self.rules = []
    
    def add_rules(self, rules):
        """Add multiple rules to the engine"""
        self.rules.extend(rules)

    def process_event(self, event: BaseEvent, session: Optional[Session] = None) -> List:
        """
        Process an event through all registered rules
        
        Args:
            event: The event to process
            session: Optional SQLAlchemy session
            
        Returns:
            List[InvoiceLine]: All invoice lines generated by matching rules
        """
        lines = []
        for rule in self.rules:
            lines.extend(rule.invoice(event))
        logger.debug(lines)
        return lines

    def process_events(self, events: List[BaseEvent], session: Optional[Session] = None) -> Dict[Account, List]:
        """
        Process multiple events and group invoice lines by account
        
        Args:
            events: List of events to process
            
        Returns:
            Dict[Account, List[InvoiceLine]]: Invoice lines grouped by account
        """
        results: Dict[Account, List] = {}
        
        for event in events:
            lines = self.process_event(event, session)
            if lines:
                account = event.account
                if account not in results:
                    results[account] = []
                results[account].extend(lines)
                
        return results

def create_default_engine() -> RuleEngine:
    """Create a RuleEngine with default rules"""
    engine = RuleEngine()

    context = BillingContext()
    metadata = load_metadata("V:/bookkeeping_2024-12.json")
    engine.add_rules(make_rules(context, metadata=metadata))
    
    return engine
